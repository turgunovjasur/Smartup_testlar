{"name": "test_inventories[chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"btn btn-success ng-scope ng-binding\" id=\"anor50-button-text-add\" ng-click=\"q.sc.firstFunc()\" ng-if=\"q.sc.first\" b-hotkey=\"add\">...</button> is not clickable at point (46, 99). Other element would receive the click: <div class=\"modal fade show\" id=\"biruniAlert\" tabindex=\"-1\" role=\"dialog\" style=\"padding-right: 11px; display: block;\">...</div>\n  (Session info: chrome=128.0.6613.138)\nStacktrace:\n\tGetHandleVerifier [0x00007FF691179632+30946]\n\t(No symbol) [0x00007FF69112E3C9]\n\t(No symbol) [0x00007FF691026FDA]\n\t(No symbol) [0x00007FF69107FEEE]\n\t(No symbol) [0x00007FF69107D962]\n\t(No symbol) [0x00007FF69107AE7B]\n\t(No symbol) [0x00007FF69107A095]\n\t(No symbol) [0x00007FF69106C271]\n\t(No symbol) [0x00007FF69109CA6A]\n\t(No symbol) [0x00007FF69106BBB6]\n\t(No symbol) [0x00007FF69109CC80]\n\t(No symbol) [0x00007FF6910BB041]\n\t(No symbol) [0x00007FF69109C813]\n\t(No symbol) [0x00007FF69106A6E5]\n\t(No symbol) [0x00007FF69106B021]\n\tGetHandleVerifier [0x00007FF6912AF83D+1301229]\n\tGetHandleVerifier [0x00007FF6912BBDB7+1351783]\n\tGetHandleVerifier [0x00007FF6912B2A03+1313971]\n\tGetHandleVerifier [0x00007FF6911ADD06+245686]\n\t(No symbol) [0x00007FF69113758F]\n\t(No symbol) [0x00007FF691133804]\n\t(No symbol) [0x00007FF691133992]\n\t(No symbol) [0x00007FF69112A3EF]\n\tBaseThreadInitThunk [0x00007FFF966C257D+29]\n\tRtlUserThreadStart [0x00007FFF97A0AF28+40]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f26afd420f0fda17b450ebf278cb1b40\")>\n\n    def test_inventories(driver):\n        # ------------------------------------------------------------------------------------------------------------------\n        # Login_page\n        # ------------------------------------------------------------------------------------------------------------------\n        email = 'admin@auto_test'\n        password = 'greenwhite'\n        # email = 'admin@test'\n        # password = 'greenwhite'\n        # ------------------------------------------------------------------------------------------------------------------\n        login_page = LoginPage(driver)\n        login_page.fill_form(email, password,\n                             LoginPage.email_xpath,\n                             LoginPage.password_xpath)\n        login_page.click_button(LoginPage.signup_xpath)\n        # ------------------------------------------------------------------------------------------------------------------\n        # Dashboard_page\n        # ------------------------------------------------------------------------------------------------------------------\n        dashboard_page = DashboardPage(driver)\n        try:\n            dashboard_page.element_visible_session(DashboardPage.active_session_header)\n            dashboard_page.click_button_delete_session(DashboardPage.delete_session_button)\n        except:\n            pass\n        dashboard_page.element_visible(dashboard_page.dashboard_header)\n        dashboard_page.click_reference_button(dashboard_page.reference_button)\n        # ------------------------------------------------------------------------------------------------------------------\n        # Reference_navbar\n        # ------------------------------------------------------------------------------------------------------------------\n        reference_navbar = ReferenceNavbar(driver)\n        reference_navbar.element_visible(ReferenceNavbar.reference_navbar_header)\n        reference_navbar.click_button_reference(ReferenceNavbar.reference_button)\n        # ------------------------------------------------------------------------------------------------------------------\n        # Inventory_list\n        # ------------------------------------------------------------------------------------------------------------------\n        inventory_list = InventoryList(driver)\n        inventory_list.element_visible(InventoryList.inventory_list_header)\n>       inventory_list.click_add_button(InventoryList.add_button)\n\ntests\\test_reference\\test_inventories.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nautotest\\anor\\mr\\product\\inventory_list\\inventory_list.py:21: in click_add_button\n    self.click((By.XPATH, add_button))\nautotest\\core\\md\\base_page.py:16: in click\n    self.wait_for_element_clickable(locator, timeout).click()\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021E0AD83A30>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF69112A3EF]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF966C257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFF97A0AF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"btn btn-success ng-scope ng-binding\" id=\"anor50-button-text-add\" ng-click=\"q.sc.firstFunc()\" ng-if=\"q.sc.first\" b-hotkey=\"add\">...</button> is not clickable at point (46, 99). Other element would receive the click: <div class=\"modal fade show\" id=\"biruniAlert\" tabindex=\"-1\" role=\"dialog\" style=\"padding-right: 11px; display: block;\">...</div>\nE         (Session info: chrome=128.0.6613.138)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF691179632+30946]\nE       \t(No symbol) [0x00007FF69112E3C9]\nE       \t(No symbol) [0x00007FF691026FDA]\nE       \t(No symbol) [0x00007FF69107FEEE]\nE       \t(No symbol) [0x00007FF69107D962]\nE       \t(No symbol) [0x00007FF69107AE7B]\nE       \t(No symbol) [0x00007FF69107A095]\nE       \t(No symbol) [0x00007FF69106C271]\nE       \t(No symbol) [0x00007FF69109CA6A]\nE       \t(No symbol) [0x00007FF69106BBB6]\nE       \t(No symbol) [0x00007FF69109CC80]\nE       \t(No symbol) [0x00007FF6910BB041]\nE       \t(No symbol) [0x00007FF69109C813]\nE       \t(No symbol) [0x00007FF69106A6E5]\nE       \t(No symbol) [0x00007FF69106B021]\nE       \tGetHandleVerifier [0x00007FF6912AF83D+1301229]\nE       \tGetHandleVerifier [0x00007FF6912BBDB7+1351783]\nE       \tGetHandleVerifier [0x00007FF6912B2A03+1313971]\nE       \tGetHandleVerifier [0x00007FF6911ADD06+245686]\nE       \t(No symbol) [0x00007FF69113758F]\nE       \t(No symbol) [0x00007FF691133804]\nE       \t(No symbol) [0x00007FF691133992]\nE       \t(No symbol) [0x00007FF69112A3EF]\nE       \tBaseThreadInitThunk [0x00007FFF966C257D+29]\nE       \tRtlUserThreadStart [0x00007FFF97A0AF28+40]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "attachments": [{"name": "stdout", "source": "34a2812f-7ee2-49d3-8746-905eb6022162-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "driver", "value": "'chrome'"}], "start": 1726398111880, "stop": 1726398116488, "uuid": "bd3c3d08-f32f-404c-973e-ef81bed4860c", "historyId": "f900afee92a655bd1c0f7e4ff61eac5d", "testCaseId": "20d27d57a1b1c8b9d7fc3b22e696a011", "fullName": "tests.test_reference.test_inventories#test_inventories", "labels": [{"name": "parentSuite", "value": "tests.test_reference"}, {"name": "suite", "value": "test_inventories"}, {"name": "host", "value": "Sherzod-Smartup"}, {"name": "thread", "value": "28152-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_reference.test_inventories"}]}